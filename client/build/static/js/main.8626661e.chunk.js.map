{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","headers","post","Form","state","name","lastname","email","message","sent","handleName","e","console","log","target","value","setState","handleEmail","handleMessage","handleLastname","formSubmit","preventDefault","data","then","res","resetForm","catch","className","onSubmit","this","htmlFor","type","placeholder","onChange","id","cols","rows","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"6RAIAA,IAAMC,SAASC,QAAQC,KAAK,+BAAiC,I,IAIxCC,E,4MAEnBC,MAAQ,CACNC,KAAM,GACNC,SAAU,GACVC,MAAO,GACPC,QAAS,GACTC,MAAM,G,EAKRC,WAAa,SAACC,GACZC,QAAQC,IAAIF,EAAEG,OAAOC,OACrB,EAAKC,SAAS,CAEZX,KAAMM,EAAEG,OAAOC,S,EAInBE,YAAc,SAACN,GACb,EAAKK,SAAS,CAEZT,MAAOI,EAAEG,OAAOC,S,EAMpBG,cAAgB,SAACP,GACf,EAAKK,SAAS,CAEZR,QAASG,EAAEG,OAAOC,S,EAKtBI,eAAiB,SAACR,GAChB,EAAKK,SAAS,CAEZV,SAAUK,EAAEG,OAAOC,S,EAQvBK,WAAa,SAACT,GACZA,EAAEU,iBAEF,IAAIC,EAAO,CACTjB,KAAM,EAAKD,MAAMC,KACjBC,SAAU,EAAKF,MAAME,SACrBC,MAAO,EAAKH,MAAMG,MAClBC,QAAS,EAAKJ,MAAMI,SAEtBT,IAAMG,KAAK,aAAcoB,GACtBC,MAAK,SAAAC,GACJ,EAAKR,SAAS,CACZP,MAAM,GACL,EAAKgB,gBACPC,OAAM,WACPd,QAAQC,IAAI,wB,EAMlBY,UAAY,WACV,EAAKT,SAAS,CACZX,KAAM,GACNC,SAAU,GACVC,MAAO,GACPC,QAAS,M,uDAQX,OAEE,yBAAKmB,UAAU,aACb,0BAAMC,SAAUC,KAAKT,YAEnB,yBAAKO,UAAU,cACb,2BAAOG,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAO1B,KAAK,OAAOsB,UAAU,OACvCK,YAAY,eAGZjB,MAAOc,KAAKzB,MAAMC,KAGlB4B,SAAUJ,KAAKnB,cAQnB,yBAAKiB,UAAU,cACb,2BAAOG,QAAQ,QAAf,cACA,2BAAOC,KAAK,OAAO1B,KAAK,OAAOsB,UAAU,OACvCK,YAAY,oBAEZjB,MAAOc,KAAKzB,MAAME,SAClB2B,SAAUJ,KAAKV,kBAOnB,yBAAKQ,UAAU,cACb,2BAAOG,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAO1B,KAAK,OAAOsB,UAAU,OACvCK,YAAY,gBAEZjB,MAAOc,KAAKzB,MAAMG,MAClB0B,SAAUJ,KAAKZ,eAOnB,yBAAKU,UAAU,uBACb,2BAAOG,QAAQ,WAAf,WACA,8BAAUzB,KAAK,UAAU6B,GAAG,GAC1BC,KAAK,KAAKC,KAAK,IAAIJ,YAAY,kBAG/BjB,MAAOc,KAAKzB,MAAMI,QAClByB,SAAUJ,KAAKX,iBAOnB,yBAAKS,UAAWE,KAAKzB,MAAMK,KAAO,gBAAkB,OAApD,2BACA,yBAAKkB,UAAU,OACb,4BAAQI,KAAK,UAAb,iB,GAlJsBM,a,MCOnBC,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCEcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACL1C,QAAQ0C,MAAMA,EAAM9C,c","file":"static/js/main.8626661e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nimport axios from 'axios';\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n\n// function App() {\n\nexport default class Form extends Component {\n\n  state = {\n    name: '',\n    lastname: '',\n    email: '',\n    message: '',\n    sent: false\n  }\n\n\n  //handle inputs\n  handleName = (e) => {\n    console.log(e.target.value);\n    this.setState({\n      // name: e.target.name\n      name: e.target.value\n    })\n  }\n\n  handleEmail = (e) => {\n    this.setState({\n      // email: e.target.email\n      email: e.target.value\n    })\n  }\n\n\n\n  handleMessage = (e) => {\n    this.setState({\n      // message: e.target.message\n      message: e.target.value\n    })\n  }\n\n\n  handleLastname = (e) => {\n    this.setState({\n      // lastname: e.target.lastname\n      lastname: e.target.value\n\n    })\n  }\n\n\n\n  // 54:00\n  formSubmit = (e) => {\n    e.preventDefault();\n\n    let data = {\n      name: this.state.name,\n      lastname: this.state.lastname,\n      email: this.state.email,\n      message: this.state.message\n    }\n    axios.post('/api/forma', data)\n      .then(res => {\n        this.setState({\n          sent: true,\n        }, this.resetForm())\n      }).catch(() => {\n        console.log('message not sent');\n      })\n  }\n\n  //for resting init data \n  // 1:00\n  resetForm = () => {\n    this.setState({\n      name: '',\n      lastname: '',\n      email: '',\n      message: '',\n    })\n\n  }\n\n\n\n  return() {\n    return (\n\n      <div className=\"container\">\n        <form onSubmit={this.formSubmit}>\n          {/* single item */}\n          <div className=\"singleItem\">\n            <label htmlFor=\"name\">name</label>\n            <input type=\"text\" name=\"name\" className=\"name\"\n              placeholder=\"your name...\"\n\n              // 45:13 tuber\n              value={this.state.name}\n              //compont state of handleName // \n\n              onChange={this.handleName}\n            //onChange 的Ｃ是大寫// \n\n            />\n          </div>\n          {/* end of single item   */}\n\n          {/* single item */}\n          <div className=\"singleItem\">\n            <label htmlFor=\"name\">last name </label>\n            <input type=\"text\" name=\"name\" className=\"name\"\n              placeholder=\"your last name...\"\n\n              value={this.state.lastname}\n              onChange={this.handleLastname}\n\n            />\n          </div>\n          {/* end of single item   */}\n\n          {/* single item */}\n          <div className=\"singleItem\">\n            <label htmlFor=\"name\">email</label>\n            <input type=\"text\" name=\"name\" className=\"name\"\n              placeholder=\"your email...\"\n\n              value={this.state.email}\n              onChange={this.handleEmail}\n\n            />\n          </div>\n          {/* end of single item   */}\n\n          {/* single item */}\n          <div className=\"textArea singleItem\">\n            <label htmlFor=\"message\">Message</label>\n            <textarea name=\"message\" id=\"\"\n              cols=\"30\" rows=\"5\" placeholder=\"your Message...\"\n\n\n              value={this.state.message}\n              onChange={this.handleMessage}\n\n            ></textarea>\n          </div>\n          {/* end of single item   */}\n\n          {/* 1:32:00 */}\n          <div className={this.state.sent ? 'msg msgAppear' : 'msg'} >Message has been desent</div>\n          <div className=\"btn\" >\n            <button type=\"submit\">submit</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Form from './Form';\n\n// path is worng  \" ,/form ===> ./Form\"\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}